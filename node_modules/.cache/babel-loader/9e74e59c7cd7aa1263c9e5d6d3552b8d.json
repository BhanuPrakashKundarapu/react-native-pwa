{"ast":null,"code":"\"use strict\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport * as React from 'react';\nimport { useNavigation } from \"./useNavigation.js\";\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\n\nexport function useIsFocused() {\n  var navigation = useNavigation();\n  var subscribe = React.useCallback(function (callback) {\n    var unsubscribeFocus = navigation.addListener('focus', callback);\n    var unsubscribeBlur = navigation.addListener('blur', callback);\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  var value = React.useSyncExternalStore(subscribe, navigation.isFocused, navigation.isFocused);\n  return value;\n}\n\n__signature__(useIsFocused, \"useNavigation{navigation}\\nuseCallback{subscribe}\\nuseSyncExternalStore{value}\", function () {\n  return [useNavigation, React.useSyncExternalStore];\n});\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useIsFocused, \"useIsFocused\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\core\\\\lib\\\\module\\\\useIsFocused.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}