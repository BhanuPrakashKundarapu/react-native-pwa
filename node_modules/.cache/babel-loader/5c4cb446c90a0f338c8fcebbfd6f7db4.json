{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\nimport { createComponentForStaticNavigation, createPathConfigForStaticNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { NavigationContainer } from \"./NavigationContainer.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Create a navigation component from a static navigation config.\n * The returned component is a wrapper around `NavigationContainer`.\n *\n * @param tree Static navigation config.\n * @returns Navigation component to use in your app.\n */\nexport function createStaticNavigation(tree) {\n  var Component = createComponentForStaticNavigation(tree, 'RootNavigator');\n  function Navigation(_ref, ref) {\n    var linking = _ref.linking,\n      rest = _objectWithoutProperties(_ref, [\"linking\"]);\n    var linkingConfig = React.useMemo(function () {\n      var screens = createPathConfigForStaticNavigation(tree, {\n        initialRouteName: linking?.config?.initialRouteName\n      }, linking?.enabled === 'auto');\n      if (!screens) return;\n      return {\n        path: linking?.config?.path,\n        initialRouteName: linking?.config?.initialRouteName,\n        screens: screens\n      };\n    }, [linking?.enabled, linking?.config?.path, linking?.config?.initialRouteName]);\n    var memoizedLinking = React.useMemo(function () {\n      if (!linking) {\n        return undefined;\n      }\n      var enabled = typeof linking.enabled === 'boolean' ? linking.enabled : linkingConfig?.screens != null;\n      return _objectSpread({}, linking, {\n        enabled: enabled,\n        config: linkingConfig\n      });\n    }, [linking, linkingConfig]);\n    if (linking?.enabled === true && linkingConfig?.screens == null) {\n      throw new Error('Linking is enabled but no linking configuration was found for the screens.\\n\\n' + 'To solve this:\\n' + \"- Specify a 'linking' property for the screens you want to link to.\\n\" + \"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\" + 'See usage guide: https://reactnavigation.org/docs/static-configuration#linking');\n    }\n    return /*#__PURE__*/_jsx(NavigationContainer, _objectSpread({}, rest, {\n      ref: ref,\n      linking: memoizedLinking,\n      children: /*#__PURE__*/_jsx(Component, {})\n    }));\n  }\n  __signature__(Navigation, \"useMemo{linkingConfig}\\nuseMemo{memoizedLinking}\");\n  return /*#__PURE__*/React.forwardRef(Navigation);\n}\n;\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(createStaticNavigation, \"createStaticNavigation\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\native\\\\lib\\\\module\\\\createStaticNavigation.js\");\n})();\n;\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}