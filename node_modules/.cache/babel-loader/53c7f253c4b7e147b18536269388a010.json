{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nvar formatToList = function formatToList(items) {\n  return Object.entries(items).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return \"- \".concat(key, \" (\").concat(value, \")\");\n  }).join('\\n');\n};\n\nexport function validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  var validation = _objectSpread({\n    path: 'string',\n    initialRouteName: 'string',\n    screens: 'object'\n  }, root ? null : {\n    alias: 'array',\n    exact: 'boolean',\n    stringify: 'object',\n    parse: 'object'\n  });\n\n  if (typeof config !== 'object' || config === null) {\n    throw new Error(\"Expected the configuration to be an object, but got \".concat(JSON.stringify(config), \".\"));\n  }\n\n  var validationErrors = Object.fromEntries(Object.keys(config).map(function (key) {\n    if (key in validation) {\n      var type = validation[key]; // @ts-expect-error: we know the key exists\n\n      var value = config[key];\n\n      if (value !== undefined) {\n        if (type === 'array') {\n          if (!Array.isArray(value)) {\n            return [key, \"expected 'Array', got '\".concat(typeof value, \"'\")];\n          }\n        } else if (typeof value !== type) {\n          return [key, \"expected '\".concat(type, \"', got '\").concat(typeof value, \"'\")];\n        }\n      }\n    } else {\n      return [key, 'extraneous'];\n    }\n\n    return null;\n  }).filter(Boolean));\n\n  if (Object.keys(validationErrors).length) {\n    throw new Error(\"Found invalid properties in the configuration:\\n\".concat(formatToList(validationErrors), \"\\n\\nYou can only specify the following properties:\\n\").concat(formatToList(validation), \"\\n\\nIf you want to specify configuration for screens, you need to specify them under a 'screens' property.\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"));\n  }\n\n  if (root && 'path' in config && typeof config.path === 'string' && config.path.includes(':')) {\n    throw new Error(\"Found invalid path '\".concat(config.path, \"'. The 'path' in the top-level configuration cannot contain patterns for params.\"));\n  }\n\n  if ('screens' in config && config.screens) {\n    Object.entries(config.screens).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          _ = _ref4[0],\n          value = _ref4[1];\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(formatToList, \"formatToList\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\core\\\\lib\\\\module\\\\validatePathConfig.js\");\n  reactHotLoader.register(validatePathConfig, \"validatePathConfig\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\core\\\\lib\\\\module\\\\validatePathConfig.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}