{"ast":null,"code":"\"use strict\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\nimport { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport { LinkingContext } from \"./LinkingContext.js\";\nvar getStateFromParams = function getStateFromParams(params) {\n  if (params?.state) {\n    return params.state;\n  }\n  if (params?.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error this is fine ðŸ”¥\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport function useLinkProps(_ref) {\n  var screen = _ref.screen,\n    params = _ref.params,\n    href = _ref.href,\n    action = _ref.action;\n  var root = React.useContext(NavigationContainerRefContext);\n  var navigation = React.useContext(NavigationHelpersContext);\n  var _React$useContext = React.useContext(LinkingContext),\n    options = _React$useContext.options;\n  var onPress = function onPress(e) {\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    var hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    var isLeftClick = e.button == null || e.button === 0; // only handle left clicks\n    var isSelfTarget = [undefined, null, '', 'self'].includes(\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.currentTarget?.target); // let browser handle \"target=_blank\" etc.\n\n    var shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = true;\n    } else if (!hasModifierKey && isLeftClick && isSelfTarget) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        // @ts-expect-error This is already type-checked by the prop types\n        navigation?.navigate(screen, params);\n      }\n    }\n  };\n  var getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n  return {\n    href: href ?? (Platform.OS === 'web' && screen != null ? getPathFromStateHelper({\n      routes: [{\n        // @ts-expect-error this is fine ðŸ”¥\n        name: screen,\n        // @ts-expect-error this is fine ðŸ”¥\n        params: params,\n        // @ts-expect-error this is fine ðŸ”¥\n        state: getStateFromParams(params)\n      }]\n    }, options?.config) : undefined),\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}\n__signature__(useLinkProps, \"useContext{root}\\nuseContext{navigation}\\nuseContext{{\\n    options\\n  }}\");\n;\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(getStateFromParams, \"getStateFromParams\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\native\\\\lib\\\\module\\\\useLinkProps.js\");\n  reactHotLoader.register(useLinkProps, \"useLinkProps\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\native\\\\lib\\\\module\\\\useLinkProps.js\");\n})();\n;\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}