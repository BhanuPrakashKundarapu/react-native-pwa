{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\nimport { nanoid } from 'nanoid/non-secure';\nimport { BaseRouter } from \"./BaseRouter.js\";\nvar TYPE_ROUTE = 'route';\nexport var TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n  return history;\n};\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return _objectSpread({}, state, {\n    index: index,\n    history: history\n  });\n};\nexport function TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    _ref$backBehavior = _ref.backBehavior,\n    backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n  var router = _objectSpread({}, BaseRouter, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes,\n        preloadedRouteKeys: []\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return _objectSpread({}, route, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name] !== undefined ? _objectSpread({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0), routes.length - 1);\n      var routeKeys = routes.map(function (route) {\n        return route.key;\n      });\n      var history = state.history?.filter(function (it) {\n        return routeKeys.includes(it.key);\n      }) ?? [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes,\n        preloadedRouteKeys: state.preloadedRouteKeys?.filter(function (key) {\n          return routeKeys.includes(key);\n        }) ?? []\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n        routeParamList = _ref4.routeParamList,\n        routeKeyChanges = _ref4.routeKeyChanges;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name && !routeKeyChanges.includes(r.name);\n        }) || {\n          name: name,\n          key: \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(\n      // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return _objectSpread({}, state, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList,\n        routeGetIdList = _ref5.routeGetIdList;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n        case 'NAVIGATE_DEPRECATED':\n          {\n            var index = state.routes.findIndex(function (route) {\n              return route.name === action.payload.name;\n            });\n            if (index === -1) {\n              return null;\n            }\n            var updatedState = changeIndex(_objectSpread({}, state, {\n              routes: state.routes.map(function (route) {\n                if (route.name !== action.payload.name) {\n                  return route;\n                }\n                var getId = routeGetIdList[route.name];\n                var currentId = getId?.({\n                  params: route.params\n                });\n                var nextId = getId?.({\n                  params: action.payload.params\n                });\n                var key = currentId === nextId ? route.key : \"\".concat(route.name, \"-\").concat(nanoid());\n                var params;\n                if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? _objectSpread({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                }\n                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? _objectSpread({}, route, {\n                  key: key,\n                  path: path,\n                  params: params\n                }) : route;\n              })\n            }), index, backBehavior, initialRouteName);\n            return _objectSpread({}, updatedState, {\n              preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(function (key) {\n                return key !== state.routes[updatedState.index].key;\n              })\n            });\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            var previousKey = state.history[state.history.length - 2]?.key;\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n            if (_index === -1) {\n              return null;\n            }\n            return _objectSpread({}, state, {\n              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {\n                return key !== state.routes[_index].key;\n              }),\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n        case 'PRELOAD':\n          {\n            var routeIndex = state.routes.findIndex(function (route) {\n              return route.name === action.payload.name;\n            });\n            if (routeIndex === -1) {\n              return null;\n            }\n            var route = state.routes[routeIndex];\n            var getId = routeGetIdList[route.name];\n            var currentId = getId?.({\n              params: route.params\n            });\n            var nextId = getId?.({\n              params: action.payload.params\n            });\n            var key = currentId === nextId ? route.key : \"\".concat(route.name, \"-\").concat(nanoid());\n            var params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread({}, routeParamList[route.name], action.payload.params) : undefined;\n            var newRoute = params !== route.params ? _objectSpread({}, route, {\n              key: key,\n              params: params\n            }) : route;\n            return _objectSpread({}, state, {\n              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {\n                return key !== route.key;\n              }).concat(newRoute.key),\n              routes: state.routes.map(function (route, index) {\n                return index === routeIndex ? newRoute : route;\n              }),\n              history: key === route.key ? state.history : state.history.filter(function (record) {\n                return record.key !== route.key;\n              })\n            });\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}\n;\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(TYPE_ROUTE, \"TYPE_ROUTE\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\routers\\\\lib\\\\module\\\\TabRouter.js\");\n  reactHotLoader.register(TabActions, \"TabActions\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\routers\\\\lib\\\\module\\\\TabRouter.js\");\n  reactHotLoader.register(getRouteHistory, \"getRouteHistory\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\routers\\\\lib\\\\module\\\\TabRouter.js\");\n  reactHotLoader.register(changeIndex, \"changeIndex\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\routers\\\\lib\\\\module\\\\TabRouter.js\");\n  reactHotLoader.register(TabRouter, \"TabRouter\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\routers\\\\lib\\\\module\\\\TabRouter.js\");\n})();\n;\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}