{"ast":null,"code":"\"use strict\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\nimport { CHILD_STATE } from \"./useRouteCache.js\";\nexport function getFocusedRouteNameFromRoute(route) {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  var state = route[CHILD_STATE] ?? route.state;\n  var params = route.params;\n  var routeName = state ?\n  // Get the currently active route name in the nested navigator\n  state.routes[\n  // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n  // The type property will only exist for rehydrated state and not for state from deep link\n  state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n  // If state doesn't exist, we need to default to `screen` param if available\n  typeof params?.screen === 'string' ? params.screen : undefined;\n  return routeName;\n}\n;\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(getFocusedRouteNameFromRoute, \"getFocusedRouteNameFromRoute\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\core\\\\lib\\\\module\\\\getFocusedRouteNameFromRoute.js\");\n})();\n;\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}