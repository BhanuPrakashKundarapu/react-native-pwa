{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport { useNavigation } from \"./useNavigation.js\";\nimport { usePreventRemoveContext } from \"./usePreventRemoveContext.js\";\nimport { useRoute } from \"./useRoute.js\";\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport function usePreventRemove(preventRemove, callback) {\n  var _React$useState = React.useState(function () {\n      return nanoid();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    id = _React$useState2[0];\n  var navigation = useNavigation();\n  var _useRoute = useRoute(),\n    routeKey = _useRoute.key;\n  var _usePreventRemoveCont = usePreventRemoveContext(),\n    setPreventRemove = _usePreventRemoveCont.setPreventRemove;\n  React.useEffect(function () {\n    setPreventRemove(id, routeKey, preventRemove);\n    return function () {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n  var beforeRemoveListener = useLatestCallback(function (e) {\n    if (!preventRemove) {\n      return;\n    }\n    e.preventDefault();\n    callback({\n      data: e.data\n    });\n  });\n  React.useEffect(function () {\n    return navigation?.addListener('beforeRemove', beforeRemoveListener);\n  }, [navigation, beforeRemoveListener]);\n}\n__signature__(usePreventRemove, \"useState{[id](() => nanoid())}\\nuseNavigation{navigation}\\nuseRoute{{\\n    key: routeKey\\n  }}\\nusePreventRemoveContext{{\\n    setPreventRemove\\n  }}\\nuseEffect{}\\nuseLatestCallback{beforeRemoveListener}\\nuseEffect{}\", function () {\n  return [useNavigation, useRoute, usePreventRemoveContext, useLatestCallback];\n});\n;\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(usePreventRemove, \"usePreventRemove\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\core\\\\lib\\\\module\\\\usePreventRemove.js\");\n})();\n;\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}