{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\nimport { useTheme } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform, Text } from 'react-native';\nimport { useLinkProps } from \"./useLinkProps.js\";\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport function Link(_ref) {\n  var screen = _ref.screen,\n    params = _ref.params,\n    action = _ref.action,\n    href = _ref.href,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, [\"screen\", \"params\", \"action\", \"href\", \"style\"]);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors,\n    fonts = _useTheme.fonts; // @ts-expect-error: This is already type-checked by the prop types\n  var props = useLinkProps({\n    screen: screen,\n    params: params,\n    action: action,\n    href: href\n  });\n  var onPress = function onPress(e) {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    // Let user prevent default behavior\n    if (!e.defaultPrevented) {\n      props.onPress(e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Text, _objectSpread({}, props, rest, Platform.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress: onPress\n    }\n  }), {\n    style: [{\n      color: colors.primary\n    }, fonts.regular, style]\n  }));\n}\n__signature__(Link, \"useTheme{{\\n    colors,\\n    fonts\\n  }}\\nuseLinkProps{props}\", function () {\n  return [useTheme, useLinkProps];\n});\n;\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(Link, \"Link\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\native\\\\lib\\\\module\\\\Link.js\");\n})();\n;\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}