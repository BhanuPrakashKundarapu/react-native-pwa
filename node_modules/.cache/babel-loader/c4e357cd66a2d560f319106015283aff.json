{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\nimport { nanoid } from 'nanoid/non-secure';\nimport { BaseRouter } from \"./BaseRouter.js\";\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  },\n  popTo: function popTo(name, params, merge) {\n    return {\n      type: 'POP_TO',\n      payload: {\n        name: name,\n        params: params,\n        merge: merge\n      }\n    };\n  }\n};\nexport function StackRouter(options) {\n  var router = _objectSpread({}, BaseRouter, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n        routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames: routeNames,\n        preloadedRoutes: [],\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread({}, route, {\n          key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n          params: routeParamList[route.name] !== undefined ? _objectSpread({}, routeParamList[route.name], route.params) : route.params\n        });\n      });\n      var preloadedRoutes = state.preloadedRoutes?.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread({}, route, {\n          key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n          params: routeParamList[route.name] !== undefined ? _objectSpread({}, routeParamList[route.name], route.params) : route.params\n        });\n      }) ?? [];\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes,\n        preloadedRoutes: preloadedRoutes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeKeyChanges = _ref3.routeKeyChanges;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);\n      });\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return _objectSpread({}, state, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return _objectSpread({}, state, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            var _action$payload = action.payload,\n              name = _action$payload.name,\n              params = _action$payload.params;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return _objectSpread({}, state, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: \"\".concat(name, \"-\").concat(nanoid()),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread({}, routeParamList[name], params) : params\n                } : route;\n              })\n            });\n          }\n        case 'PUSH':\n        case 'NAVIGATE':\n          {\n            if (!state.routeNames.includes(action.payload.name)) {\n              return null;\n            }\n            var getId = options.routeGetIdList[action.payload.name];\n            var id = getId?.({\n              params: action.payload.params\n            });\n            var route;\n            if (id !== undefined) {\n              route = state.routes.find(function (route) {\n                return route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                });\n              });\n            } else {\n              var currentRoute = state.routes[state.index];\n\n              // If the route matches the current one, then navigate to it\n              if (action.type === 'NAVIGATE' && action.payload.name === currentRoute.name) {\n                route = currentRoute;\n              }\n            }\n            if (!route) {\n              route = state.preloadedRoutes.find(function (route) {\n                return route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                });\n              });\n            }\n            var _params;\n            if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n              _params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], route.params, action.payload.params) : route.params;\n            } else {\n              _params = routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params;\n            }\n            var routes;\n            if (route) {\n              var routeKey = route.key;\n              routes = state.routes.filter(function (r) {\n                return r.key !== routeKey;\n              });\n              routes.push(_objectSpread({}, route, {\n                path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                params: _params\n              }));\n            } else {\n              routes = [].concat(_toConsumableArray(state.routes), [{\n                key: \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                params: _params\n              }]);\n            }\n            return _objectSpread({}, state, {\n              index: routes.length - 1,\n              preloadedRoutes: state.preloadedRoutes.filter(function (route) {\n                return routes[routes.length - 1].key !== route.key;\n              }),\n              routes: routes\n            });\n          }\n        case 'NAVIGATE_DEPRECATED':\n          {\n            if (state.preloadedRoutes.find(function (route) {\n              return route.name === action.payload.name && _id === _getId?.({\n                params: route.params\n              });\n            })) {\n              return null;\n            }\n            if (!state.routeNames.includes(action.payload.name)) {\n              return null;\n            }\n\n            // If the route already exists, navigate to that\n            var _index = -1;\n            var _getId = options.routeGetIdList[action.payload.name];\n            var _id = _getId?.({\n              params: action.payload.params\n            });\n            if (_id) {\n              _index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id === _getId?.({\n                  params: route.params\n                });\n              });\n            } else if (state.routes[state.index].name === action.payload.name) {\n              _index = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name) {\n                  _index = i;\n                  break;\n                }\n              }\n            }\n            if (_index === -1) {\n              var _routes = [].concat(_toConsumableArray(state.routes), [{\n                key: \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }]);\n              return _objectSpread({}, state, {\n                routes: _routes,\n                index: _routes.length - 1\n              });\n            }\n            var _route = state.routes[_index];\n            var _params2;\n            if (action.payload.merge) {\n              _params2 = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? _objectSpread({}, routeParamList[_route.name], _route.params, action.payload.params) : _route.params;\n            } else {\n              _params2 = routeParamList[_route.name] !== undefined ? _objectSpread({}, routeParamList[_route.name], action.payload.params) : action.payload.params;\n            }\n            return _objectSpread({}, state, {\n              index: _index,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index)), [_params2 !== _route.params ? _objectSpread({}, _route, {\n                params: _params2\n              }) : state.routes[_index]])\n            });\n          }\n        case 'POP':\n          {\n            var _index2 = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (_index2 > 0) {\n              var count = Math.max(_index2 - action.payload.count + 1, 1);\n              var _routes2 = state.routes.slice(0, count).concat(state.routes.slice(_index2 + 1));\n              return _objectSpread({}, state, {\n                index: _routes2.length - 1,\n                routes: _routes2\n              });\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'POP_TO':\n          {\n            if (!state.routeNames.includes(action.payload.name)) {\n              return null;\n            }\n\n            // If the route already exists, navigate to that\n            var _index3 = -1;\n            var _getId2 = options.routeGetIdList[action.payload.name];\n            var _id2 = _getId2?.({\n              params: action.payload.params\n            });\n            if (_id2) {\n              _index3 = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id2 === _getId2?.({\n                  params: route.params\n                });\n              });\n            } else if (state.routes[state.index].name === action.payload.name) {\n              _index3 = state.index;\n            } else {\n              for (var _i = state.routes.length - 1; _i >= 0; _i--) {\n                if (state.routes[_i].name === action.payload.name) {\n                  _index3 = _i;\n                  break;\n                }\n              }\n            }\n\n            // If the route doesn't exist, remove the current route and add the new one\n            if (_index3 === -1) {\n              var _routes3 = [].concat(_toConsumableArray(state.routes.slice(0, -1)), [{\n                key: \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }]);\n              return _objectSpread({}, state, {\n                routes: _routes3,\n                index: _routes3.length - 1\n              });\n            }\n            var _route2 = state.routes[_index3];\n            var _params3;\n            if (action.payload.merge) {\n              _params3 = action.payload.params !== undefined || routeParamList[_route2.name] !== undefined ? _objectSpread({}, routeParamList[_route2.name], _route2.params, action.payload.params) : _route2.params;\n            } else {\n              _params3 = routeParamList[_route2.name] !== undefined ? _objectSpread({}, routeParamList[_route2.name], action.payload.params) : action.payload.params;\n            }\n            return _objectSpread({}, state, {\n              index: _index3,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index3)), [_params3 !== _route2.params ? _objectSpread({}, _route2, {\n                params: _params3\n              }) : state.routes[_index3]])\n            });\n          }\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        case 'PRELOAD':\n          {\n            var _getId3 = options.routeGetIdList[action.payload.name];\n            var _id3 = _getId3?.({\n              params: action.payload.params\n            });\n            var _route3;\n            if (_id3 !== undefined) {\n              _route3 = state.routes.find(function (route) {\n                return route.name === action.payload.name && _id3 === _getId3?.({\n                  params: route.params\n                });\n              });\n            }\n            if (_route3) {\n              return _objectSpread({}, state, {\n                routes: state.routes.map(function (r) {\n                  if (r.key !== _route3?.key) {\n                    return r;\n                  }\n                  return _objectSpread({}, r, {\n                    params: routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n                  });\n                })\n              });\n            } else {\n              return _objectSpread({}, state, {\n                preloadedRoutes: state.preloadedRoutes.filter(function (r) {\n                  return r.name !== action.payload.name || _id3 !== _getId3?.({\n                    params: r.params\n                  });\n                }).concat({\n                  key: \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                  name: action.payload.name,\n                  params: routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n                })\n              });\n            }\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}\n;\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(StackActions, \"StackActions\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\routers\\\\lib\\\\module\\\\StackRouter.js\");\n  reactHotLoader.register(StackRouter, \"StackRouter\", \"D:\\\\Vscode\\\\MERNPROJECTS\\\\Pwa reference\\\\react-native-pwa\\\\react-native-pwa\\\\node_modules\\\\@react-navigation\\\\routers\\\\lib\\\\module\\\\StackRouter.js\");\n})();\n;\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}